#!/usr/bin/env ruby

require 'rubygems'
require 'inifile'
require 'optparse'

require 'zabbix_conf'

# sync global stdout
STDOUT.sync = true

def execute(options={}, config={})
  server = config[:server]
  agent  = config[:agent]

  zabconf = ZabbixConf::Configure.new

  if !agent.empty? && !server.empty?
    zabconf.config_agent(options, config)
  end
  
  # if server
  #   zabconf.config_server(options, config)
  # end

end

def validate_inifile(agent={}, server={})
  errors = []
  
  unless server.empty?
    errors << 'Missing server fqdn' if server['fqdn'].nil?
    errors << 'Missing server ip'   if server['ip'].nil?
    errors << 'Missing server password'  if server['pass'].nil?
    errors << 'Missing server username'  if server['user'].nil?
  end
  unless agent.empty?
    errors << 'Missing agent fqdn' if agent['fqdn'].nil?
    errors << 'Missing agent ip'   if agent['ip'].nil?
  end
  
  return errors, {:agent => agent, :server => server}
end


def validate_args(optparse, options)
  begin
    optparse.parse!
    required = [:config_path]
    missing = required.select{ |param| options[param].nil? }
    if not missing.empty?
      puts "Missing options: #{missing.join(', ')}"
      puts optparse
      exit
    end

    # Check if config exists, else throw error
    raise Errno::ENOENT.new options[:config_path] unless File.exists?(options[:config_path]) 

    # Validate ini file
    ini_data = IniFile.load(options[:config_path])
    errors, args = validate_inifile(ini_data['agent'],ini_data['server'])
    raise "Configuration Error\n #{errors.join("\n")}" unless errors.empty?

    # All is valid, return arguments
    args
  rescue OptionParser::InvalidOption, OptionParser::MissingArgument
    puts $!.to_s
    puts optparse
    exit
  end
end


options = {}

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: zabconf [options] --config-path=FILE"

  options[:verbose] = false
    opts.on( '-v', '--verbose', 'Output more information' ) do
    options[:verbose] = true
  end

  opts.on( '-c', '--config-path FILE', 'Path to config file' ) do |value|
    options[:config_path] = value
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

# Execute script if valid args
config = validate_args(optparse, options)   
execute(options, config) if config 
  